using System;
using Hl7.Fhir.Model;
using Hl7.Fhir.Rest;
using Hl7.Fhir.Serialization;
using Raijin.Core.CompositePattern;
using Raijin.Core.Helpers;
using Raijin.Core.MappingLogic.OpenEhrToFhir;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Raijin.Core.Adapters.OpenEhrToFhir
{
    public abstract class OpenEhrToFhirAdapterBase
    {
        /// <summary>
        /// Simple Log4Net Logger Object
        /// </summary>
        //public static readonly ILog Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>
        /// Gets the name of the current adapter.
        /// </summary>
        public string AdapterName => GetType().Name;

        /// <summary>
        /// Counts the number of success points for the current adapter.
        /// </summary>
        public int SuccessfulMappingCount { get; set; } = 0;

        /// <summary>
        /// A confidence score based on the number of success points the adapter has.
        /// </summary>
        public double ConfidenceScore { get; set; } = 0.0;

        /// <summary>
        /// A collection of all mappings for the current adapter.
        /// </summary>
        public List<BaseMapping> Mappings { get; set; } = new List<BaseMapping>();

        /// <summary>
        /// A collection of the resources generated by this adapter.
        /// </summary>
        public List<Resource> ResourceList { get; set; } = new List<Resource>();

        /// <summary>
        /// A collection of nodes which have been processed and should not be repeated for the current message.
        /// </summary>
        public List<Component> ProcessedNodes { get; set; } = new List<Component>();

        /// <summary>
        /// A version of the resource list converted to a FHIR bundle.
        /// </summary>
        public Bundle ResourceBundle
        {
            get
            {
                var bundle = new Bundle();
                for (var i = 0; i < ResourceList.Count; i++)
                {
                    var resource = ResourceList[i];
                    bundle.AddResourceEntry(resource, $"{resource.TypeName}_{i}");
                }
                return bundle;
            }
        }

        /// <summary>
        /// A version of the resource list converted to a FHIR bundle Xml string.
        /// </summary>
        public string SerializedResourceBundleXml => StringHelper.FormatXml(new FhirXmlSerializer(new SerializerSettings()).SerializeToString(ResourceBundle));

        /// <summary>
        /// A version of the resource list converted to a FHIR bundle Json string.
        /// </summary>
        public string SerializedResourceBundleJson => StringHelper.FormatJson(new FhirJsonSerializer(new SerializerSettings()).SerializeToString(ResourceBundle));

        /// <summary>
        /// An in-memory version of the OpenEHR flat file record based on the composite pattern.
        /// </summary>
        public Composite OpenEhrRecord { get; set; }

        /// <summary>
        /// Wrapper around all sub-mapping execute method; executes all mappings in this adapter.
        /// </summary>
        public void ExecuteProcessMappings()
        {
            //Log.Info($"Processing message using adapter: {AdapterName}.");

            Mappings.ToList().ForEach(x => x.ProcessMappings(this));

            //Log.Info($"Completed processing of message using adapter: {AdapterName}.\n");

            var allLeafNodes = OpenEhrRecord.All(new List<Component>()).Where(x =>
                x.GetType() == typeof(Leaf) &&
                Mappings.Any(y => LevenshteinDistance.Compute(y.OpenEhrFieldPath, x.Parent.Name) <= 10)).ToList();

            var totalNodeCount = allLeafNodes.Count;

            var confidence = (double)SuccessfulMappingCount / (double)totalNodeCount * 100;

            ConfidenceScore = confidence;

            //Log.Info($"Completed processing of message using adapter: {AdapterName}, generated confidence of {confidence}%.\n");
        }

        /// <summary>
        /// Executes all mappings of a specific type in this adapter.
        /// </summary>
        /// <param name="mappingType">The mapping type to process.</param>
        public void ExecuteProcessMappings(MappingType mappingType)
        {
            Mappings.Where(x => x.MappingType == mappingType).ToList().ForEach(x => x.ProcessMappings(this));
        }

        // ======================
        // Debug & Timing Methods
        // ======================

        /// <summary>
        /// Displays the serialized FHIR result to the console.
        /// </summary>
        public void DisplayFhirResult(ResourceFormat resourceFormat = ResourceFormat.Xml)
        {
            if (resourceFormat == ResourceFormat.Json)
            {
                foreach (var line in SerializedResourceBundleJson.Split(new[] { "\n" }, StringSplitOptions.None))
                {
                    Console.WriteLine(line);
                }
            }
            // return in XML if the requested resource format isn't JSON
            else
            {
                foreach (var line in SerializedResourceBundleXml.Split(new[] { "\n" }, StringSplitOptions.None))
                {
                    if (line.Contains("\""))
                    {
                        var parts = line.Split(new[] { "\"" }, StringSplitOptions.None);
                        for (var i = 0; i < parts.Length; i++)
                        {
                            var part = parts[i];
                            switch (i)
                            {
                                case 0:
                                    Console.Write(part);
                                    break;
                                case 1:
                                    Console.Write("\"" + part + "\"", Console.ForegroundColor = ConsoleColor.Green);
                                    Console.ResetColor();
                                    break;
                                case 2:
                                    Console.Write(part + "\n");
                                    break;
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine(line);
                    }
                }
            }
        }

        /// <summary>
        /// Displays the serialized FHIR result to the console with timing information.
        /// </summary>
        public void DisplayFhirResultDebugTimer(ResourceFormat resourceFormat = ResourceFormat.Xml)
        {
            var s = new Stopwatch();
            s.Start();

            if (resourceFormat == ResourceFormat.Json)
            {
                foreach (var line in SerializedResourceBundleJson.Split(new[] { "\n" }, StringSplitOptions.None))
                {
                    Console.WriteLine(line);
                }
            }
            // return in XML if the requested resource format isn't JSON
            else
            {
                foreach (var line in SerializedResourceBundleXml.Split(new[] { "\n" }, StringSplitOptions.None))
                {
                    if (line.Contains("\""))
                    {
                        var parts = line.Split(new[] { "\"" }, StringSplitOptions.None);
                        for (var i = 0; i < parts.Length; i++)
                        {
                            var part = parts[i];
                            switch (i)
                            {
                                case 0:
                                    Console.Write(part);
                                    break;
                                case 1:
                                    Console.Write("\"" + part + "\"", Console.ForegroundColor = ConsoleColor.Green);
                                    Console.ResetColor();
                                    break;
                                case 2:
                                    Console.Write(part + "\n");
                                    break;
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine(line);
                    }
                }
            }

            s.Stop();
            var timeTaken = s.Elapsed.TotalSeconds.ToString(CultureInfo.InvariantCulture);

            Console.WriteLine($"\nFormatting FHIR took {timeTaken} secs.", Console.ForegroundColor = ConsoleColor.Cyan);
            Console.ResetColor();
        }

        /// <summary>
        /// Executes all mappings in this adapter and logs timing information.
        /// </summary>
        public void ExecuteProcessMappingsDebugTimer()
        {
            //Log.Info($"Processing message using adapter: {AdapterName}.");

            var s = new Stopwatch();
            s.Start();
            Mappings.ToList().ForEach(x => x.ProcessMappings(this));
            s.Stop();
            var timeTaken = s.Elapsed.TotalSeconds.ToString(CultureInfo.InvariantCulture);

            var allLeafNodes = OpenEhrRecord.All(new List<Component>()).Where(x =>
                x.GetType() == typeof(Leaf) &&
                Mappings.Any(y => LevenshteinDistance.Compute(y.OpenEhrFieldPath, x.Parent.Name) <= 10)).ToList();

            var totalNodeCount = allLeafNodes.Count;

            double confidence = (double)SuccessfulMappingCount / (double)totalNodeCount * 100;

            ConfidenceScore = confidence;

            //Log.Info($"Completed processing of message in {timeTaken} seconds using adapter: {AdapterName}, generated confidence of {confidence}%.\n");
        }
    }
}
